---
title:  "Using GNU Stow to Manage my .dotfiles"
date:   2021-07-4
last_modified_at: 2022-1-7
categories: [linux, blog]
tags: [linux, blog, .dotfiles, arch linux, gnu stow]
---
In this blog post I will outline the process that I use to manage my configuration files across two different devices.

Using two different Linux devices both with different window managers I needed a solution that would easily allow me to manage the configuration files across both devices. While most of the configuration files are the same some files such as screen layout configuration, xinitrc etc vary due to the differing initialisation requirements of the window managers on each device. There were two solutions I investigated to fulfil these requirements, a Git bare respository and GNU Stow. I chose to use Stow as I felt it provided the easiest solution to manage my requirements.

Stow is described on its man page as being "A symlink manager which takes distinct sets of software/data located in separate directories in the filesystem, and makes them appear to be located in a single directory tree". This provides the opportunity to sync a single Github repository between the two devices.

In my home folder I created a .dotfiles directory to use as my Stow directory  and then created individual package directories for each of the application configuration files I wanted to manage via source control. This particular aspect makes the management of configuration files much easier as some programs create folders to store their configuration files in while others may place a single configuration file in a standard location such as the .config folder.
 For those configuration files that differed across the devices I created specific folders for these devices. An example of the folder structure is below.

```powershell
[craig][~]-> tree ~/.dotfiles
|-- alacritty
|-- bash
|   |-- Laptop
|   |-- Mini
|-- polybar
|-- rofi
|-- screenConfig
|   |-- Laptop
|-- |-- Mini
|-- xinitrc
|-- |-- Laptop
|-- |-- Mini
```

The folder structure below each of the individual application directories needs to replicate the folder structure of the default location that the application stores its configuration files in this includes the actual configuration file names and formats that you want to create symlinks for using Stow. An example of the alacritty folder structure is shown below.

```powershell
[craig][~]-> tree -a .dotfiles/alacritty/
.dotfiles/alacritty/
`-- .config
    `-- alacritty
        `-- alacritty.yml
```

When using Stow it is preferable to move into the stow package directory in my case .dotfiles before running any commands. To move the actual configuration files from the alacritty directory and replace them with symlinks to the files in .dotfiles the below command would be used.

```powershell
[craig][~/.dotfiles]-> stow -nvt ~ alacritty
```

The -n option provides a What-If function to show what Stow would have done based on the command inputs provided. The -v flag displays verbose output, this is not super detailed but useful to see what actions Stow has taken. The -t flag specifies the target directory and alacritty specifies the configuration files you want to symlink.

<h3>Device Specific .dotfile Management</h3>

When using Stow to symlink the files for a specific device it is essential to change directory from the .dotfiles Stow folder into the application package folder as demonstrated below with my .bashrc file.

[craig][~/.dotfiles/bash]-> stow -nvt ~ Mini

Executing this command produced the below warning message:

```powershell
[craig][~/.dotfiles/bash]-> stow -nvt ~ Mini
WARNING! stowing Mini would cause conflicts:
  * existing target is neither a link nor a directory: .bashrc
All operations aborted.
```

This is Ok, I had not created a dummy .bashrc file in the ~/.dotfiles/bash/Mini directory. Amending the stow command to include --adopt shows that the files will be linked as expected.

```powershell
[craig][~/.dotfiles/bash]-> stow --adopt  -nvt ~ Mini
MV: .bashrc -> .dotfiles/bash/Mini/.bashrc
LINK: .bashrc => .dotfiles/bash/Mini/.bashrc
WARNING: in simulation mode so not modifying filesystem.
```

The command to create the symlink for the .bashrc file is below.

```powershell
[craig][~/.dotfiles/bash]-> stow --adopt -vt ~ Mini
```


<h3>Conclusion</h3>

Using GNU stow is an easy to implement and effective method to manage .dotfiles in Linux across multiple devices and makes their management through source control a simple task. 
I'm yet to be required to restore a configuration on one of my machines yet, but based on the research I conducted when exploring this solution it will be a straight forward process.
<p>I continue to be amazed at the options that exist in the world of Linux and Open Source.</p> 
